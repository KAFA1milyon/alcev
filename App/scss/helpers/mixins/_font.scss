/** -------------------------------------------
    Text Related Mixins
    ------------------------------------------- **/

@function remove-unit($number){
    @return $number / ($number * 0 + 1);
}

/**
  * Rem to PX
  */
@function rem-to-px($font-size) {
    $convert-base: 16px;

    @if variable_exists(base-font-size) {
        $convert-base: $base-font-size;
    }

    $u: unit($font-size);

    @if($u == 'px'){
        @return $font-size;
    }

    $unitless: remove-unit($font-size);
    @return $unitless * $convert-base;
}

/**
 * REM converter
 * in style's config, we hope to have a base-font-size variable,
 * if not, we define it according to standart html font-size
 */
@function rem($font-size) {
    $convert-base: 16px;

    @if variable_exists(base-font-size) {
        $convert-base: $base-font-size;
    }

    $u: unit($font-size);

    // rem calculations
    @if ($u == 'rem'){
        @return $font-size;
    } @else {
        $convert: $font-size/$convert-base;
        @return #{$convert}rem;
    }
}

/**
 * Fontface
 *
 * http://caniuse.com/#search=font-face
 * https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face
 * For modern approach, woff and ttf format is supported all major browsers. If you need to support
 * Internet Explorer 8, with setting "$support-for-ie8" variable to "true", the eot file format
 * also added to mixin output. You also need to provide related file formats in your fonts folder.
 *
 * @font-face {
              [ font-family: <family-name>; ]?
           || [ src: [ <uri> [format(<string>#)]? | <font-face-name> ]#; ]?
           || [ unicode-range: <urange>#; ]?
           || [ font-variant: <font-variant>; ]?
           || [ font-feature-settings: normal|<feature-tag-value>#; ]?
           || [ font-stretch: <font-stretch>; ]?
           || [ font-weight: <weight>; ]?
           || [ font-style: <style>; ]?
   }
 */
@mixin font-face($name, $file, $version, $weight: normal, $style: normal) {
    $ie8-support: false;
    $eot: "";

    @if variable_exists(support-for-ie8) {
        $ie8-support: $support-for-ie8;
    }

    @if ($ie8-support == true) {
        $eot: 'url("../fonts/#{$file}.eot?v=#{$version}") format("embedded-opentype"),'
    }

    @font-face {
        font-family: "#{$name}";
        src: #{$eot}
            url("../fonts/#{$file}.woff2?v=#{$version}") format("woff2"),        
            url("../fonts/#{$file}.woff?v=#{$version}") format("woff"),                
            url("../fonts/#{$file}.ttf?v=#{$version}") format("truetype");
        font-weight: $weight;
        font-style: $style;
    }
}

/**
  * Font Icon
  *
  * Outputs an icon font definition with supporting class attribute selectors.
  * For preventing font misuse for the element, the class selector applied to :before pseuode element
  * instead of the element itself.
  */
@mixin font-icon($name, $file, $version) {
    $prefix-icon: 'icon-';
    $placeholder-icon: '%font-icon';

    @if variable_exists(icon-prefix) {
        $prefix-icon: $icon-prefix;
    }

    @if variable_exists(icon-placeholder) {
        $placeholder-icon: $icon-placeholder;
    }

    //@include font-face($name, $file, $version);

    #{$placeholder-icon} {
        font: {
            family: $name;
            style: normal;
            variant: normal;
            weight: normal;
        };
        line-height: 1;
        text-transform: none;

        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    [class^="#{$prefix-icon}"]:before, [class*=" #{$prefix-icon}"]:before {
        @extend #{$placeholder-icon};
    }
}

/**
 * Font-Size callback
 *
 * For modern usage, converts and output font-size with rem units.
 */
@mixin font-size($font-size) {
    $ie8-support: true;
    @if variable_exists(support-for-ie8) {
        $ie8-support: $support-for-ie8;
    }

    @if ($font-size == inherit) {
        font-size: inherit;
    } @else {
        @if ($ie8-support == true) {
            font-size: rem-to-px($font-size);
        }
        font-size: rem($font-size);
    }
}
